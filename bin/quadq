#!/bin/bash
#
#                              .___
#       ________ _______     __| _/          ______
#      / ____/  |  \__  \   / __ |  ______  / ____/
#     < <_|  |  |  // __ \_/ /_/ | /_____/ < <_|  |
#      \__   |____/(____  /\____ |          \__   |
#         |__|          \/      \/             |__|:
#         ------------------ version 0.8c ---------
#
#
#   [ overview ]
#
#       --------------------------------------------
#       --------------------------------------------
#       - feature(s) ------ function(s) ------------
#       ---- add ------------- cmd_add -------------
#       ---- clone ----------- cmd_clone -----------
#       ---- delete ---------- cmd_delete ----------
#       ---- edit ------------ cmd_edit ------------
#       ---- finish ---------- cmd_finish ----------
#       ---- help ------------ cmd_help ------------
#       ---- list ------------ cmd_list ------------
#       ---- read ------------ cmd_read ------------
#       ---- start ----------- cmd_start -----------
#       ---- restart --------- cmd_restart ---------
#       ---- verbose --------- set_verbose ---------
#       ---- zero ------------ cmd_zero ------------
#       ---------------------- display_error -------
#       ---------------------- display_usage -------
#       ---------------------- set_payload----------
#       ---------------------- util_generate_id ----
#       ---------------------- util_search ---------
#       --------------------------------------------
#       --------------------------------------------
#
#


    #
    # default(s)
    #
    quadq="$HOME/.config/quadq";
    quadq_config="$quadq/quadq.conf"
    quadq_exec='bash'
    quadq_job="$quadq/job"
    quadq_name="quadq"
    quadq_script=$(readlink -f $0)


    #
    # command(s)
    #
    cp='cp'
    date='date'
    echo='echo'
    head='head'
    find='find'
    less='less'
    ls='ls'
    mkdir='mkdir'
    mv='mv'
    rm='rm'
    sed='sed'
    shuf='shuf'
    tail='tail'
    touch='touch'
    tree='tree'


    #
    # function(s)
    #

        #
        #   "Ode to javascript"
        #
        id=
        job=
        payload=
        verbose=1

        #
        #   cmd_add -- creates a new job
        #
        function cmd_add() {
            if [ ! -z "$payload" ]; then
                util_generate_id
                job="$quadq_job/pending/$id.job"
                $echo "# quadq.job.command"             >> $job
                $echo ""                                >> $job
                $echo -e "\t$payload"                   >> $job
                $echo ""                                >> $job
                $echo "#"                               >> $job
                $echo "# quadq.hook"                    >> $job
                $echo "$quadq_script -q $id"            >> $job
                return 0
            else
                display_error 'Unable to add, command not specified'
            fi
        }

        #
        #   cmd_clone -- clone a job.
        #
        function cmd_clone() {
            util_generate_id
            $head -n -1 "$job" > "$quadq_job/pending/$id.job"
            job="$quadq_job/pending/$id.job"
            $echo "$quadq_script -q $id" >> $job
            return 0
        }

        #
        #   cmd_delete -- deletes a job
        #
        function cmd_delete() {
            if [ -w "$job" ]; then
                $rm "$job"*
            else
                display_error 'Unable to delete, job not found'
            fi
            return 0
        }

        #
        #   cmd_edit -- edit a job
        #
        function cmd_edit() {
            if [ -r "$job" ]; then
                if [ ! -z "$EDITOR" ]; then
                    "$EDITOR" "$job"
                else
                    display_error 'Default editor not set'
                fi
            else
                display_error 'Unable to edit, job not found'
            fi
            return 0
        }

        #
        #   cmd_finish -- finish a job
        #
        function cmd_finish() {
            if [ -r "$job" ]; then
                $mv "$job"* "$quadq_job/complete";
            else
                display_error 'Unable to finish, job not attractive'
            fi
        }

        #   cmd_flush -- removes completed jobs from $quadq_job/complete
        #
        function cmd_flush() {
            $rm "$quadq_job/complete/"*
        }

        #
        #   display_help
        #
        function cmd_help() {
            $echo "$0 usage:                                                        "
            $echo "                                                                 "
            $echo "  Overview:                                                      "
            $echo "                                                                 "
            $echo "      A flat file job queue program.                             "
            $echo "                                                                 "
            $echo "                                                                 "
            $echo "  Features:                                                      "
            $echo "                                                                 "
            $echo "      add 'command' ---------------- Add a job.                  "
            $echo "      clone 'jobid' ---------------- Clone a job.                "
            $echo "      delete 'jobid'---------------- Delete a job.               "
            $echo "      edit 'jobid' ----------------- Edit a job.                 "
            $echo "      finish 'jobid' --------------- Finish a job.               "
            $echo "      help ------------------------- Help.                       "
            $echo "      list ------------------------- List job status.            "
            $echo "      quadq ------------------------ Quadq callback hook.        "
            $echo "      read jobid ------------------- Read ($less) a job.         "
            $echo "      restart ---------------------- Restart a complete job.     "
            $echo "      start ------------------------ Start.                      "
            $echo "      verbose ---------------------- Verbose.                    "
            $echo "      zero ------------------------- Delete completed jobs.      "
            $echo "                                                                 "
            $echo "                                                                 "
            $echo "  Example Usage:                                                 "
            $echo "                                                                 "
            $echo "      ## Add a commmand ls to the quadq.                         "
            $echo "      -$ quadq add 'ls'                                          "
            $echo "                                                                 "
            $echo "      ## Display the quadq.                                      "
            $echo "      -$ quadq list                                              "
            $echo "                                                                 "
            $echo "      ## Edit a job.                                             "
            $echo "      -$ quadq edit 1442451471678716                             "
            $echo "                                                                 "
            $echo "      ## Start quadq, 1 job a time.                              "
            $echo "      -$ quadq start                                             "
            $echo "                                                                 "
            $echo "      ## Start quadq, 2 job(s) at a time.                        "
            $echo "      -$ quadq start && quadq start                              "
            $echo "                                                                 "
            $echo "      ## Start quadq, 3 job(s) at a time.                        "
            $echo "      -$ quadq start && quadq start && quadq start               "
            $echo "                                                                 "
            $echo "      ## View a job by ID.                                       "
            $echo "      -$ quadq read 123812                                       "
            $echo "                                                                 "
            $echo "                                                                 "
        }

        #
        #   cmd_list -- performs $tree on $quadq_job
        #
        function cmd_list() {
            $echo "| quadq"
            $tree -C -l --noreport "$quadq_job"                              | \
                $tail -n +2                                                  | \
                $sed 's/\.job//g'
        }
        # reference: pass, password-store

        #
        #   cmd_read -- $less a job
        #
        function cmd_read() {
            if [ -r "$job" ]; then
                $less "$job"*
            else
                display_error 'Unable to read, job not found'
            fi
            return 0
        }

        #
        #   cmd_restart -- restart a completed job.
        #
        function cmd_restart() {
            $echo "$job" | $grep 'complete' > /dev/null
            if [ $? -eq 0 ]; then
                $mv "$job"* "$quadq_job/pending/"
            else 
                display_error 'Job not complete'
            fi
        }

        #
        #
        #   cmd_start -- starts oldest job in $quadq_job/pending
        #
        function cmd_start() {

            pending="$quadq_job/pending"
            if [ `$ls "$pending" | wc -l` -gt 0 ]; then

                # pending -> active
                job=$( $ls -1t "$pending/"*".job" | $tail -1 )
                active="$quadq_job/active/`basename $job`"
                $mv "$job"* "$quadq_job/active"
                job="$active"

                          # activate & record
                          output="$job.output"
                $touch  "$output"
                if [ -w "$output" ]; then
                    "$quadq_exec" "$job" >> "$output" 2>&1   &
                else 
                    display_error "Unable to start, '$output' is not writeable"
                fi

            else
                display_error 'No jobs pending'
            fi

        }

        #   display_error - display error if verbose
        #   $1 = error message
        #
        function display_error() {
            if [ $verbose -eq 0 ]; then
                $echo "Error: $1."
            else
                $echo "Error: $1." >&2
            fi
            exit 2
        }

        #
        #   display_usage - command usage
        #
        function display_usage() {
            $echo "Error: Incorrect usage."
            $echo "Try '$quadq_name -h' for more information."
            exit 2
        }

        #
        #   set_payload - sets command payload
        #   $1 = payload (command to be executed)
        #
        function set_payload() {
            payload="$1"
        }

        #
        #   set_verbose - set verbose true
        #
        function set_verbose() {
            cp='cp --verbose'
            head='head --verbose'
            mv='mv --verbose'
            rm='rm --verbose'
            verbose=0
        }

        #
        #   util_generate_id - generates unique id
        #
        function util_generate_id() {
            run=0
            id=$( $echo `$date +%s``$shuf -i 100000-999999 -n 1` )
            unique=$( $find "$quadq_job" -name *$id* | wc -l )
            while [ $unique -ne 0 ]; do
                id=$( $echo `$date +%s``$shuf -i 100000-999999 -n 1` )
                unique=$( $find "$quadq_job" -name *$id* | wc -l )
            done
        }


        #
        #   util_mkdir - make a directory or exit
        #   $1 = path
        #
        function util_mkdir() {
            $mkdir -p "$1"
            if [ $? -ne 0 ]; then
                display_error "Unable to create '$1'"
                $exit 2
            fi
            return 0
        }

        #
        #   util_search - translates jobid to job file path
        #   $1 = user_jobid
        #
        function util_search() {
                     result_count=$( $find "$quadq_job" -name *"$1"*".job" -type f | wc -l )
            if   [ "$result_count" -eq 1 ]; then
                job=$( $find "$quadq_job" -name *"$1"*".job" -type f )
            elif [ "$result_count" -gt 1 ]; then
                display_error "Multiple jobs found matching '$1'"
            else
                display_error "Unable to find any jobs matching '$1'"
            fi
            return 0
        }

    #
    # function(s)
    # -- end
    #


    #
    # logic
    #

        # check -- arg(s)
        if [ $# -eq 0 ]; then
            display_usage
            $exit 2
        fi

        # check -- config
        if [ -r "$quadq_config" ]; then
            source "$quadq_config"
        fi

        # create -- directory(s)
        util_mkdir "$quadq_job"
        util_mkdir "$quadq_job/pending"
        util_mkdir "$quadq_job/active"
        util_mkdir "$quadq_job/complete"

        # arg(s)
        case "$1" in
            add|-a)
                shift
                set_payload "$1"
                shift
                cmd_add
                ;;
            clone|-c)
                shift
                util_search "$1"
                shift
                cmd_clone
                ;;
            delete|-d)
                shift
                util_search "$1"
                shift
                cmd_delete
                ;;
            edit|-e)
                shift
                util_search "$1"
                shift
                cmd_edit
                ;;
            finish|-f)
                shift
                util_search "$1"
                shift
                cmd_finish
                ;;
            flush|-z)
                shift
                cmd_flush
                ;;
            help|-h)
                shift
                cmd_help
                ;;
            list|-l)
                shift
                cmd_list
                ;;
            quadq|-q)
                shift
                util_search "$1"
                shift
                cmd_finish
                cmd_start
                ;;
            read|-r)
                shift
                util_search "$1"
                shift
                cmd_read
                ;;
            restart|-x)
                shift
                util_search "$1"
                shift
                cmd_restart
                ;;
            start|-s)
                shift
                cmd_start
                ;;
            verbose|-v)
                shift
                set_verbose
                ;;
            *)
                display_usage
                ;;
        esac

    #
    # logic
    # -- end
    #


#
# ^(^_^)> -- pew pew
#
